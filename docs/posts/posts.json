[
  {
    "path": "posts/2021-11-09-r-bootcamp-1-the-basics/",
    "title": "R Bootcamp #1: The Basics",
    "description": "An introduction to basic R functions, data types, and structures",
    "author": [
      {
        "name": "Derek Holliday",
        "url": {}
      }
    ],
    "date": "2021-11-09",
    "categories": [
      "bootcamp"
    ],
    "contents": "\r\nWelcome to R bootcamp! Over the next few posts, we will cover basic R functionality necessary for your growth as social scientists.\r\nStructure and Setup\r\nEach tutorial will focus on one facet of R programming and can consist of a number of resources. Some will be done in video format, others more as long-form written tutorials, and some with more interactive components (or a combination of the 3). They are designed so that you can complete them in one or two sittings (think of them as a class session). Tutorials may be created by more than one Maven/TA, so you have the opportunity to see different approaches and styles. You are encouraged to reach out to us if you ever get stuck, we’re here to help!\r\nIf you haven’t already, you should install R and RStudio.\r\nVideo Summary\r\n\r\n\r\nWhat is R?\r\nR is a programming language designed for statistical computing. One of its main draws is that R is free and open source, meaning it is openly available for modification and distribution. The result is an incredibly vibrant user base active in creating new and exciting ways to use the language. It also means online help is easy to come by! R is becoming more and more popular in academia and industry for data analysis… pretty much anything you can do in Python can be done in R and vice-versa.\r\nWhile you can run R code via the built-in graphical user interface (RGui), the dominant preference is using RStudio. RStudio is an integrated development environment (IDE) that gives you all the tools needed to program. The main benefit is the ability to write and test scripts on the fly without having to enter commands one at a time.\r\nFor a more detailed summary of navigating RStudio, watch the video provided with this tutorial.\r\nBasic R Commands\r\nNow for some basic functionalities within R. If you’ve had previous experience with R or any other programming language, this should be familiar to you and you can go through this quickly.\r\nAssignment\r\nR is an object oriented programming language, meaning the basic building block when coding is some object that has an associated value.\r\nTo assign a value to a variable, we use an assignment operator. <- is the most commonly used assignment operator amongst R users, but many who come from a more programming-oriented background (myself included) use =.\r\n\r\n\r\na <- 1 # assign the variable 'a' the value of 1\r\na # print\r\n\r\n\r\n[1] 1\r\n\r\nThe first line of code above makes the assignment, and the second of just entering a asks R to give you the value of that variable. The same thing works using =:\r\n\r\n\r\nb = 2\r\nb\r\n\r\n\r\n[1] 2\r\n\r\nMath\r\nR can be used as a calculator using both numbers and the variables you assign values to. R follows PEMDAS, but () are recommended for readability.\r\n\r\n\r\n5 + 6 # addition\r\n\r\n\r\n[1] 11\r\n\r\n9 - 3 # subtraction\r\n\r\n\r\n[1] 6\r\n\r\n6 / 10 # division\r\n\r\n\r\n[1] 0.6\r\n\r\n5 * 8 # multiplication\r\n\r\n\r\n[1] 40\r\n\r\n5 ^ 2 # exponentiation\r\n\r\n\r\n[1] 25\r\n\r\nsqrt(25) # square roots, etc...\r\n\r\n\r\n[1] 5\r\n\r\nNote the different structure of sqrt(). This is a function, where 25 is the value provided to the first argument of the function. We will get into more complex functions later, but is important you understand the language behind them. Also note you can perform multiple operations at once, but remember your order of operations!\r\n\r\n\r\n5 + 3 ^ 2 / 3 - 10\r\n\r\n\r\n[1] -2\r\n\r\n(5 + 3)^2 / (3 - 10)\r\n\r\n\r\n[1] -9.142857\r\n\r\nVariables\r\nVariables are the workhorse objects of R. They store whatever you give them (what we did above with a and b).\r\nThere are many naming conventions for variables, and it tends to depend on your personal style:\r\n\r\n\r\nsome_use_snake_case\r\nothers.use.periods\r\ngoogleUsesCamelCase\r\n\r\n\r\n\r\nThis is entirely a matter of preference. I tend to use snake case because many of the base R functions use periods and shouldn’t be overwritten (such as is.matrix()), but that isn’t unique to periods (for example, the read_dta() function from the haven package).\r\nWe can now perform operations using variables:\r\n\r\n\r\nx = 10\r\ny = 15\r\nx + y\r\n\r\n\r\n[1] 25\r\n\r\nOnce a variable is stored, it is kept in your system’s global environment until overwritten or you shut down your R session. Remember the values of a and b from above?\r\n\r\n\r\na + b\r\n\r\n\r\n[1] 3\r\n\r\nVariables don’t have to be numeric. For example, we can assign a character string to x, overwriting its previous value:\r\n\r\n\r\nx = 'This is a character string'\r\nx\r\n\r\n\r\n[1] \"This is a character string\"\r\n\r\nEither single or double quotations work, just be consistent. Now that we’ve overwritten the value of x, look at what happens when we try to mix types in a function:\r\n\r\n\r\nx + y\r\n\r\n\r\nError in x + y: non-numeric argument to binary operator\r\n\r\nYou should be wary of performing operations on mixed types, as they can lead to unexpected outcomes. R is a fairly lenient language… if it can do something, it’ll do it without warning you that something might be fishy.\r\nTo check what kind of variable you have, you can use class():\r\n\r\n\r\nclass(x)\r\n\r\n\r\n[1] \"character\"\r\n\r\nclass(y)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nAnother type of variable is a boolean. These take simple TRUE/FALSE values:\r\n\r\n\r\nmy_boolean = T\r\nmy_other_boolean = FALSE\r\n\r\nmy_boolean\r\n\r\n\r\n[1] TRUE\r\n\r\nmy_other_boolean\r\n\r\n\r\n[1] FALSE\r\n\r\nYou can use the single letters T/F and the written versions TRUE/FALSE interchangeably. Just make sure to NEVER assign a value to T or F unless you want to break something.\r\nVectors\r\nSo far we’ve worked with variables with only one object in them:\r\n\r\n\r\nlength(x) # returns number of objects inside a variable\r\n\r\n\r\n[1] 1\r\n\r\nThese are called scalars and are actually fairly rare in our day-to-day work, since we tend to want to perform operations on variables holding multiple objects. These variables are called vectors:\r\n\r\n\r\nmy_vector = c(1,2,3,4,5,6)\r\nmy_vector\r\n\r\n\r\n[1] 1 2 3 4 5 6\r\n\r\nclass(my_vector)\r\n\r\n\r\n[1] \"numeric\"\r\n\r\nlength(my_vector)\r\n\r\n\r\n[1] 6\r\n\r\nNotice that c() is a function that combines or concatenates objects together. Note that all the objects in a vector need to be the same class. Let’s see what happens when we combine character and numeric objects together:\r\n\r\n\r\nvector2 = c(1,2,3,'dog')\r\nvector2\r\n\r\n\r\n[1] \"1\"   \"2\"   \"3\"   \"dog\"\r\n\r\nclass(vector2)\r\n\r\n\r\n[1] \"character\"\r\n\r\nWhat did it do to the numeric elements? Note that it will ALWAYS default to ALL characters if you have a single non-numeric item in the vector.\r\nIn sum, you can have vectors of single type scalars:\r\n\r\n\r\nmy_numeric_vector = c(1,10,20,30,50,100)\r\nmy_character_vector = c('cool','this','is','a','character','vector')\r\nmy_boolean_vector = c(T,T,T,F,F,T)\r\n\r\n\r\n\r\nNaming vectors\r\nSometimes it can be useful to assign names to objects in vectors to keep track of values associated with certain things. Let’s say I want to assign batting averages to baseball players on the Los Angeles Dodgers. I’ll create a vector of batting averages, then assign names to the averages using the names() function:\r\n\r\n\r\nbatting_average = c(.338, .306, .278, .264)\r\nnames(batting_average) = c(\"Trea Turner\", \"Corey Seager\", \"Justin Turner\", \"Mookie Betts\")\r\nbatting_average\r\n\r\n\r\n  Trea Turner  Corey Seager Justin Turner  Mookie Betts \r\n        0.338         0.306         0.278         0.264 \r\n\r\nWhat if I want to reuse those names for other vectors, but don’t want to copy and paste them every time? You can create a vector of names and use that for assignment instead:\r\n\r\n\r\ngames_played = c(52, 95, 151, 122)\r\nplayer_names = c(\"Trea Turner\", \"Corey Seager\", \"Justin Turner\", \"Mookie Betts\")\r\nnames(games_played) = player_names\r\ngames_played\r\n\r\n\r\n  Trea Turner  Corey Seager Justin Turner  Mookie Betts \r\n           52            95           151           122 \r\n\r\nManipulating vectors\r\nVectors allow for some advanced calculations:\r\n\r\n\r\na <- c(1,2,3,4,5)\r\nb <- c(1,5,2,6,3)\r\nsum(a)\r\n\r\n\r\n[1] 15\r\n\r\nsum(b)\r\n\r\n\r\n[1] 17\r\n\r\nNotice what happens when you add these together (this is unique to vector based code!):\r\n\r\n\r\na + b\r\n\r\n\r\n[1]  2  7  5 10  8\r\n\r\nThe default R behavior is to perform element-wise operations: functions are applied to elements of the same position. Note that R will still perform operations on vectors of different lengths, but give a warning message and recycle elements from the shorter vector.\r\nSome other things you can do with vectors:\r\n\r\n\r\na > b  # Greater than\r\n\r\n\r\n[1] FALSE FALSE  TRUE FALSE  TRUE\r\n\r\na < b  # Less than\r\n\r\n\r\n[1] FALSE  TRUE FALSE  TRUE FALSE\r\n\r\na >= b # Greater than or equal to\r\n\r\n\r\n[1]  TRUE FALSE  TRUE FALSE  TRUE\r\n\r\na <= b # Less than or equal to\r\n\r\n\r\n[1]  TRUE  TRUE FALSE  TRUE FALSE\r\n\r\na == b # Equal to\r\n\r\n\r\n[1]  TRUE FALSE FALSE FALSE FALSE\r\n\r\na != b # Not equal to\r\n\r\n\r\n[1] FALSE  TRUE  TRUE  TRUE  TRUE\r\n\r\nYou can also locate items within vectors using bracket operators:\r\n\r\n\r\nb[2]       # second element\r\n\r\n\r\n[1] 5\r\n\r\nb[1:3]     # elements 1 through 3\r\n\r\n\r\n[1] 1 5 2\r\n\r\nb[c(2,4)]  # elements 2 and 4\r\n\r\n\r\n[1] 5 6\r\n\r\nb[-5]      # not element 5\r\n\r\n\r\n[1] 1 5 2 6\r\n\r\nb[-(2:3)]  # not elements 2 through 3\r\n\r\n\r\n[1] 1 6 3\r\n\r\nb[-c(2,4)] # not elements 2 and 4\r\n\r\n\r\n[1] 1 2 3\r\n\r\nYou can do some pretty advanced selections, too. Let’s say you want to pull out the values of every object in a vector that is positive:\r\n\r\n\r\nvec <- c(-2,-5,-7,2,5,-3,12)\r\nvec > 0 # notice the boolean vector returned\r\n\r\n\r\n[1] FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\r\n\r\nvec[vec == 12] # this pulls out every value that corresponds to the argument\r\n\r\n\r\n[1] 12\r\n\r\nMatrices: 2-dimensional arrays of data\r\nMoving now from single vectors of data to 2 dimensional arrays (think of spreadsheets with rows and columns!) called matrices. Note that matrices are used frequently when you are doing statistical analyses. You won’t use explicitly use them very often, at least at first, with your own data analysis but you will be using them frequently in your statistics courses.\r\nLet’s create a 2x2 empty matrix:\r\n\r\n\r\nmatrix(nrow=2,ncol=2)\r\n\r\n\r\n     [,1] [,2]\r\n[1,]   NA   NA\r\n[2,]   NA   NA\r\n\r\nAt this point we should pause to discuss functions again. matrix is a function that creates a matrix and takes a number of arguments. Here, we are just providing values for two: nrow and ncol. To see the full list of arguments take by a function and how it works, simply type ?functionName into the console to display a help menu.\r\nYou can create a matrix with specific values:\r\n\r\n\r\nmatrix(data = c(1,2,3,4),nrow=2,ncol=2)\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    1    3\r\n[2,]    2    4\r\n\r\nNotice it fills it in by column by default. You can fill it in the other way, by row:\r\n\r\n\r\nmatrix(data = c(1,2,3,4),nrow=2,ncol=2,byrow=T)\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    1    2\r\n[2,]    3    4\r\n\r\nLet’s do a bigger matrix:\r\n\r\n\r\nmatrix(1:28,nrow=4)\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r\n[1,]    1    5    9   13   17   21   25\r\n[2,]    2    6   10   14   18   22   26\r\n[3,]    3    7   11   15   19   23   27\r\n[4,]    4    8   12   16   20   24   28\r\n\r\nNotice that I don’t need to tell it number of columns because it will calculate how many columns needed to fill in 4 rows with 28 objects. What happens if I misspecify?\r\n\r\n\r\nmyMatrix <- matrix(1:25,nrow=4)\r\nmyMatrix\r\n\r\n\r\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\r\n[1,]    1    5    9   13   17   21   25\r\n[2,]    2    6   10   14   18   22    1\r\n[3,]    3    7   11   15   19   23    2\r\n[4,]    4    8   12   16   20   24    3\r\n\r\nNotice that IT WILL STILL CREATE THE MATRIX but will return an error. Look at what it does to the extra values that weren’t specified. If you mess up and mis-specify the matrix and don’t pay attention, you can create grave errors this way.\r\nYou can give the matrix rownames and column names:\r\n\r\n\r\nrownames(myMatrix) <- c('row1','row2','row3','row4')\r\ncolnames(myMatrix) <- c('a','b','c','d','e','f','g')\r\nmyMatrix\r\n\r\n\r\n     a b  c  d  e  f  g\r\nrow1 1 5  9 13 17 21 25\r\nrow2 2 6 10 14 18 22  1\r\nrow3 3 7 11 15 19 23  2\r\nrow4 4 8 12 16 20 24  3\r\n\r\nYou can add rows and columns to the matrix using two useful commands rbind and cbind:\r\n\r\n\r\nrow5 <- 1:7\r\nrbind(myMatrix,row5)\r\n\r\n\r\n     a b  c  d  e  f  g\r\nrow1 1 5  9 13 17 21 25\r\nrow2 2 6 10 14 18 22  1\r\nrow3 3 7 11 15 19 23  2\r\nrow4 4 8 12 16 20 24  3\r\nrow5 1 2  3  4  5  6  7\r\n\r\nNote what happens after you add that, though:\r\n\r\n\r\nmyMatrix\r\n\r\n\r\n     a b  c  d  e  f  g\r\nrow1 1 5  9 13 17 21 25\r\nrow2 2 6 10 14 18 22  1\r\nrow3 3 7 11 15 19 23  2\r\nrow4 4 8 12 16 20 24  3\r\n\r\nIt isn’t permanently added until you save it:\r\n\r\n\r\nmyMatrix <- rbind(myMatrix,row5)\r\nmyMatrix\r\n\r\n\r\n     a b  c  d  e  f  g\r\nrow1 1 5  9 13 17 21 25\r\nrow2 2 6 10 14 18 22  1\r\nrow3 3 7 11 15 19 23  2\r\nrow4 4 8 12 16 20 24  3\r\nrow5 1 2  3  4  5  6  7\r\n\r\nLet’s add a column now:\r\n\r\n\r\nh <- c(1,2,3,4,5)\r\nmyMatrix <- cbind(myMatrix,h)\r\nmyMatrix\r\n\r\n\r\n     a b  c  d  e  f  g h\r\nrow1 1 5  9 13 17 21 25 1\r\nrow2 2 6 10 14 18 22  1 2\r\nrow3 3 7 11 15 19 23  2 3\r\nrow4 4 8 12 16 20 24  3 4\r\nrow5 1 2  3  4  5  6  7 5\r\n\r\nSelecting objects from a 2 dimension array\r\nYou can use bracket operators to select objects from a 2-dimensional array as well. You just need to specify the row and column in this format matrix[row,column]\r\n\r\n\r\nmyMatrix[1,2] # row 1, column 2\r\n\r\n\r\n[1] 5\r\n\r\nmyMatrix[1,] # return EVERYTHING in row 1\r\n\r\n\r\n a  b  c  d  e  f  g  h \r\n 1  5  9 13 17 21 25  1 \r\n\r\nmyMatrix[,2] # return EVERYTHING in column 2\r\n\r\n\r\nrow1 row2 row3 row4 row5 \r\n   5    6    7    8    2 \r\n\r\nOr you can be more advanced. Let’s select row 1 and 5 for column 2 and 4:\r\n\r\n\r\nmyMatrix[c(1,5),c(2,4)]\r\n\r\n\r\n     b  d\r\nrow1 5 13\r\nrow5 2  4\r\n\r\nOr rows 1 through 4 of columns 2 through 4:\r\n\r\n\r\nmyMatrix[1:4,2:4]\r\n\r\n\r\n     b  c  d\r\nrow1 5  9 13\r\nrow2 6 10 14\r\nrow3 7 11 15\r\nrow4 8 12 16\r\n\r\nYou can do calculations with matrices:\r\n\r\n\r\nmyMatrix * 2\r\n\r\n\r\n     a  b  c  d  e  f  g  h\r\nrow1 2 10 18 26 34 42 50  2\r\nrow2 4 12 20 28 36 44  2  4\r\nrow3 6 14 22 30 38 46  4  6\r\nrow4 8 16 24 32 40 48  6  8\r\nrow5 2  4  6  8 10 12 14 10\r\n\r\nmyMatrix / 2\r\n\r\n\r\n       a   b   c   d    e    f    g   h\r\nrow1 0.5 2.5 4.5 6.5  8.5 10.5 12.5 0.5\r\nrow2 1.0 3.0 5.0 7.0  9.0 11.0  0.5 1.0\r\nrow3 1.5 3.5 5.5 7.5  9.5 11.5  1.0 1.5\r\nrow4 2.0 4.0 6.0 8.0 10.0 12.0  1.5 2.0\r\nrow5 0.5 1.0 1.5 2.0  2.5  3.0  3.5 2.5\r\n\r\nmyMatrix * myMatrix # This is element-wise\r\n\r\n\r\n      a  b   c   d   e   f   g  h\r\nrow1  1 25  81 169 289 441 625  1\r\nrow2  4 36 100 196 324 484   1  4\r\nrow3  9 49 121 225 361 529   4  9\r\nrow4 16 64 144 256 400 576   9 16\r\nrow5  1  4   9  16  25  36  49 25\r\n\r\nt(myMatrix) # transpose\r\n\r\n\r\n  row1 row2 row3 row4 row5\r\na    1    2    3    4    1\r\nb    5    6    7    8    2\r\nc    9   10   11   12    3\r\nd   13   14   15   16    4\r\ne   17   18   19   20    5\r\nf   21   22   23   24    6\r\ng   25    1    2    3    7\r\nh    1    2    3    4    5\r\n\r\nIf you want to do actual matrix multiplication, you need to use the special matrix multiplication operator %*%\r\n\r\n\r\nmyMatrix %*% t(myMatrix)\r\n\r\n\r\n     row1 row2 row3 row4 row5\r\nrow1 1632 1099 1191 1283  481\r\nrow2 1099 1149 1224 1299  339\r\nrow3 1191 1224 1307 1390  372\r\nrow4 1283 1299 1390 1481  405\r\nrow5  481  339  372  405  165\r\n\r\nDataframes\r\nThe next format we’ll learn is the data frame. This is how you will work with data almost all of the time you are doing statistical analyses. Think again of the spreadsheet where you have rows (observations) and columns (variables). Dataframes are different than matrices because they can hold different types of data. One column can be numeric, another character, and another boolean.\r\nImportant to note here that there is a ‘tidy’ version of dataframes called tibbles, which has built-in differences for viewing and stricter subsetting functionality. You will learn more about that in future lessons.\r\nTo work with a sample dataframe let’s install the package palmerpenguins so that we can work with their toy dataset.\r\n\r\n\r\n#install.packages('palmerpenguins') if you need to\r\nlibrary(palmerpenguins) #load the package and datasets\r\n\r\n\r\n\r\nIf you ever want to know what datasets a package loads, you can use the following:\r\n\r\n\r\ndata(package = \"palmerpenguins\")\r\n\r\n\r\n\r\nIn this case, we get two dataframes: penguins and penguins_raw.\r\nThere are some helper functions in R to help you look at a dataframe. The first, which will be helpful at first but I encourage you to not use frequently is View()\r\n\r\n\r\nView(penguins)\r\n\r\n\r\n\r\nUse these instead:\r\n\r\n\r\nhead(penguins) #looks at the first 6 rows\r\ntail(penguins) #looks at last 6 rows\r\nstr(penguins) #shows what each variable is\r\nsummary(penguins) #summarises each variable\r\n\r\n\r\n\r\nHow do you create your own dataframe?\r\n\r\n\r\nmyDataFrame <- data.frame(x = rnorm(10),\r\n                          y = rnorm(10))\r\nmyDataFrame\r\n\r\n\r\n            x          y\r\n1   0.2354903  2.0336686\r\n2  -1.4904838 -1.1920353\r\n3   0.6248154  1.6115905\r\n4   0.5229260  0.5715655\r\n5  -0.4287546  2.7795006\r\n6  -0.8648364 -0.1467845\r\n7  -0.2602724 -0.8452769\r\n8  -0.3204525 -0.8213184\r\n9   0.3472319 -0.4166162\r\n10 -0.1078901  1.0603229\r\n\r\nA few things are happening here. I am creating a dataframe with 2 columns, x and y. Each consists of 10 random values from a standard normal distribution, that is what the rnorm() function does. Therefore it has 10 rows. You can look at the size of the dataframe with the dim() function or count the rows and columsn with the nrow() and ncol() functions. Note that your dataframe will look different than mine becuase you will be drawing different random numbers. This is okay! For consistency, you can use set.seed()\r\n\r\n\r\ndim(myDataFrame)\r\n\r\n\r\n[1] 10  2\r\n\r\nncol(myDataFrame)\r\n\r\n\r\n[1] 2\r\n\r\nnrow(myDataFrame)\r\n\r\n\r\n[1] 10\r\n\r\nYou select elements the same way as with matrices, but there are some additional operators for dataframes:\r\n\r\n\r\nmyDataFrame[1,2] #first row, second column\r\n\r\n\r\n[1] 2.033669\r\n\r\nLet’s say you want to just look at the objects in column 1. There are four basic ways to do this (and probably more!)\r\n\r\n\r\nmyDataFrame[,1] # first column\r\nmyDataFrame[,'x'] # column named x\r\nmyDataFrame$x # column named x (most common)\r\nmyDataFrame[['x']] # column named x\r\n\r\n\r\n\r\nLists\r\nLast, but not least, lists are like file drawers cabinets where each object in the list (a drawer) can hold whatever it wants. Here’s an example:\r\n\r\n\r\nmyList <- vector('list',3) #this is a 3 object list, or a three drawer filed cabinet\r\nmyList\r\n\r\n\r\n[[1]]\r\nNULL\r\n\r\n[[2]]\r\nNULL\r\n\r\n[[3]]\r\nNULL\r\n\r\nLet’s add some stuff to the drawers:\r\n\r\n\r\nmyList[[1]] <- myDataFrame\r\nmyList[[2]] <- c('these','are','a','few', 'of', 'my', 'favorite', 'things')\r\nmyList[[3]] <- myMatrix\r\n\r\n\r\n\r\nThe first drawer now has our dataframe, the second a character vector, and the third a matrix. When you start working a lot with packages, you will see that packages often return objects to you in lists.\r\nNotice that you subset lists using the double brackets!\r\nIf you want to access a particular observation of a particular item in your list, you can do so. For example, let’s select the 2nd observation of the second element in the list:\r\n\r\n\r\nmyList[[3]][2,3]\r\n\r\n\r\n[1] 10\r\n\r\nTest your knowledge\r\nFollow THIS LINK to an interactive application to test the skills you learned in this lesson.\r\nAcknowledgements\r\nThis material (and much of the subsequent material) borrows from the work done by many before me. I’m especially grateful to Tyler Reny (Claremont Graduate University) and Justin Esarey (Wake Forest) for R resources and lessons.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-11-09-r-bootcamp-1-the-basics/bootcamp_1.png",
    "last_modified": "2021-11-12T21:19:34-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-10-31-external-resources-for-r-beginners/",
    "title": "External Resources for R Beginners",
    "description": "A collection of R resources from around the coding world.",
    "author": [
      {
        "name": "Derek Holliday",
        "url": {}
      }
    ],
    "date": "2021-10-31",
    "categories": [
      "resources"
    ],
    "contents": "\r\nAs mavens, we will provide you with custom resources and tutorials tailored to your needs as political science graduate students. However, much of learning R is experimenting with multiple learning styles and pulling from different sources, so we want to introduce you to a few external resources we consider to be (1) high in quality and (2) relevant to your particular needs. All of these resources are free (with the exception of one). No one person learns R in the same was as another, and that’s part of the fun!\r\nTraditional Courses\r\nMany people find the traditional university course structure to be good for personal accountability. There are a number of intro to R courses online that fit this description:\r\nJohns Hopkins Data Science: Foundations using R Specialization (via coursera).\r\nHarvard Statistics and R (via edX, Life Science focus but the earlier parts are still a good introduction)\r\ncodecademy’s Learn R (requires a subscription, but slightly more interactive than the other courses)\r\nVideos and Books\r\nA slightly more hands-off approach, these resources give you a number of videos and examples you can pick and choose between and explore at your own pace:\r\nR for Data Science aka “The Bible” written by Hadley Wickham and Garrett Grolemund (you’ll be seeing those names quite a bit), this is the definitive source for a “tidy” textbook introduction R for our purposes.\r\nRStudio Primers written by the folks over at RStudio themselves, so you get the best practices straight from the source.\r\nSICSS Boot Camp for an option in between a true course and pick-and-choose video options.\r\nInteractive Materials\r\nOne of the greatest pedagogical advancements for R in the past few years is the availability of within-IDE tutorials for R beginners. You can boot up RStudio, load a lesson via one of these packages, and just follow directions from there, so you are truly able to learn while doing:\r\nKosuke Imai’s Quantitative Social Science: An Introduction via swirl is especially good with the introductory courses, and best used as a prerequisite to the materials that follow.\r\nSeo-young Silvia Kim’s introduction to the tidyverse via swirl is an amazing resource for beginners looking to tidy their approach to R.\r\nIt is also worth noting that swirl itself has its own courses, but they haven’t been updated for a few years.\r\nTwitter\r\nTwitter provides a great place to keep up with the latest and greatest in R tutorials, packages, and advancements. There are too many amazing accounts to list here, but I will suggest following We are R-Ladies, Hadley Wickham, and Julia Silge as active R Twitter users.\r\nA Closing Word\r\nAs new acolytes of R, you should be familiar that there is an ongoing boycott of a certain provider of R resources that we have purposefully left off this list. You should be aware that the boycott exists and can learn about the reasons why here.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-10-31-external-resources-for-r-beginners/rresources.png",
    "last_modified": "2021-10-31T20:02:49-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-10-25-welcome-post/",
    "title": "Welcome Post",
    "description": "Our first post!",
    "author": [
      {
        "name": "Derek Holliday",
        "url": {}
      }
    ],
    "date": "2021-10-25",
    "categories": [
      "announcements"
    ],
    "contents": "\r\nWelcome! This page is where posts will be indexed. These will include videos and guides created by mavens and lists of external resources we have found useful.\r\nHello World\r\n\r\n\r\n",
    "preview": "posts/2021-10-25-welcome-post/HelloWorld.svg",
    "last_modified": "2021-10-25T16:30:39-07:00",
    "input_file": {}
  }
]
